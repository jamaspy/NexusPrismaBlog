import {
  allPostsQuery,
  createPostMutation,
  deletePostMutation,
  updatePostMutation,
} from "@/graphql/Posts";
import { useMutation, useQuery } from "@apollo/client";
import { Inter } from "@next/font/google";
import { Post } from "@prisma/client";
import Head from "next/head";
import Image from "next/image";
import React from "react";
const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [selected, setSelected] = React.useState<number | null>(null);
  const [title, setTitle] = React.useState<string>("");
  const [content, setContent] = React.useState<string>("");

  const { data, loading, error } = useQuery(allPostsQuery);

  const [
    createPost,
    { data: CreateDate, loading: CreateLoading, error: CreateError },
  ] = useMutation(createPostMutation, {
    refetchQueries: [{ query: allPostsQuery }],
  });

  const [
    updatePost,
    { data: UpdateData, loading: UpdateLoading, error: UpdateError },
  ] = useMutation(updatePostMutation, {
    refetchQueries: [{ query: allPostsQuery }],
  });
  const [
    deletePost,
    { data: DeleteData, loading: DeleteLoading, error: DeleteError },
  ] = useMutation(deletePostMutation, {
    refetchQueries: [{ query: allPostsQuery }],
  });

  const postId = selected;

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error.message}</p>;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto p-4">
        {data &&
          data?.allPosts.map((post: Post) => (
            <div
              onClick={() => {
                if (+post.id === selected) {
                  setSelected(null);
                  setTitle("");
                  setContent("");
                  return;
                }
                setSelected(+post.id);
                setTitle(post.title);
                setContent(post.content);
              }}
              key={post.id}
              className={`border p-4 my-12 rounded ${
                +post.id === selected && "bg-green-200"
              }`}
            >
              <h1>{post.title}</h1>
              <p>{post.content}</p>
              <p>id: {post.id}</p>
            </div>
          ))}
        <hr className="h-2" />
        <h1 className="mt-12 text-xl">
          {selected ? "Update Post" : "Create Post"}
        </h1>
        <form>
          <div className="flex flex-col">
            <label htmlFor="title">Title</label>
            <input
              className="border p-4 rounded"
              type="text"
              placeholder="Title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>
          <div className="flex flex-col mt-4">
            <label htmlFor="title">Content</label>
            <input
              className="border p-4 rounded"
              type="text"
              placeholder="Content"
              value={content}
              onChange={(e) => setContent(e.target.value)}
            />
          </div>
        </form>

        <div className="flex flex-row">
          <button
            className="border p-4 m-3 rounded"
            onClick={async () => {
              await createPost({
                variables: {
                  title,
                  content,
                },
              });
              setTitle("");
              setContent("");
            }}
          >
            {CreateLoading ? "Creating..." : "Create"}
          </button>
          <button
            className={`${
              !selected ? "bg-red-300" : "bg-blue-300"
            } border p-4 m-3 rounded block`}
            disabled={!selected}
            onClick={() => {
              updatePost({
                variables: {
                  id: postId,
                  title,
                  content,
                },
              });
            }}
          >
            {UpdateLoading ? "Updating..." : "Update"}
          </button>
          <button
            className={`${
              !selected ? "bg-red-300" : "bg-blue-300"
            } border p-4 m-3 rounded block`}
            disabled={!selected}
            onClick={() => {
              deletePost({
                variables: {
                  id: postId,
                },
              });
            }}
          >
            {DeleteLoading ? "Deleting" : "Delete"}
          </button>
        </div>
      </main>
    </>
  );
}
